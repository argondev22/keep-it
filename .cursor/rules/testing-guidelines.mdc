---
description: テスト実装とテスト戦略のガイドライン
---

# テストガイドライン

## テスト戦略
- **テストピラミッド**に基づく階層的テスト
- **単体テスト（Unit Test）**: 70%
- **統合テスト（Integration Test）**: 20%
- **E2Eテスト（End-to-End Test）**: 10%

## フロントエンドテスト（React）
- **Jest + React Testing Library**を使用
- **コンポーネントテスト**の重視
- **ユーザー行動**に基づくテスト

```javascript
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import App from './App';

test('ボタンクリックでAPIが呼ばれる', async () => {
  render(<App />);
  const button = screen.getByText('Click Me!');

  fireEvent.click(button);

  await waitFor(() => {
    expect(screen.getByText(/Hello Template!/)).toBeInTheDocument();
  });
});
```

## バックエンドテスト（Python）
- **pytest**を使用
- **テストデータベース**の分離
- **モック**を適切に使用

```python
import pytest
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_create_user():
    response = client.post(
        "/api/users",
        json={"email": "test@example.com", "nickname": "テストユーザー"}
    )
    assert response.status_code == 201
    assert response.json()["email"] == "test@example.com"
```

## データベーステスト
- **テスト用データベース**の使用
- **トランザクションロールバック**によるテストデータクリーンアップ
- **ファクトリーパターン**によるテストデータ生成

## APIテスト
- **OpenAPI仕様**に基づくテスト
- **レスポンススキーマ**の検証
- **エラーケース**のテスト
- **認証・認可**のテスト

## パフォーマンステスト
- **レスポンス時間**の測定
- **負荷テスト**の実施
- **メモリ使用量**の監視
- **データベースクエリ**の最適化検証

## セキュリティテスト
- **入力検証**のテスト
- **認証・認可**のテスト
- **SQLインジェクション**対策の検証
- **XSS攻撃**対策の検証

## テストデータ管理
- **テストフィクスチャ**の適切な管理
- **テストデータ**の一貫性保持
- **個人情報**を含まないテストデータの使用

## CI/CD統合
- **GitHub Actions**でのテスト自動実行
- **コードカバレッジ**の測定と報告
- **テスト失敗時**の適切な通知
- **本番デプロイ前**のテスト必須実行
