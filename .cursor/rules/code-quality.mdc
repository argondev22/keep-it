---
alwaysApply: true
---

# コード品質ルール

## 基本原則
- **可読性**を最優先とする
- **SOLID原則**に従う
- **DRY（Don't Repeat Yourself）**原則の遵守
- **YAGNI（You Aren't Gonna Need It）**原則の適用

## コーディングスタイル

### Python
- **PEP 8**準拠
- **Black**によるコードフォーマット
- **isort**によるimport文の整理
- **型ヒント**の積極的な使用

### JavaScript/React
- **ESLint**による静的解析
- **Prettier**によるコードフォーマット
- **セミコロン**の必須使用
- **const/let**の適切な使い分け

## 命名規則
- **変数・関数**: snake_case（Python）、camelCase（JavaScript）
- **クラス**: PascalCase
- **定数**: UPPER_SNAKE_CASE
- **ファイル**: kebab-case（推奨）

## コメント・ドキュメント
- **日本語**でのコメント記述
- **docstring**の適切な記述（Python）
- **JSDoc**の使用（JavaScript）
- **TODO/FIXME**コメントの適切な管理

## 関数・メソッド設計
- **単一責任**の原則
- **引数は5個以下**に制限
- **戻り値の型**を明確にする
- **副作用**を最小限に抑える

## エラーハンドリング
- **適切な例外処理**の実装
- **ユーザーフレンドリー**なエラーメッセージ
- **ログ出力**の適切な実装
- **エラーの伝播**を適切に管理

## パフォーマンス考慮
- **O記法**を意識したアルゴリズム選択
- **メモリ使用量**の最適化
- **データベースクエリ**の効率化
- **キャッシュ戦略**の実装

## セキュリティ
- **入力検証**の徹底
- **機密情報**のハードコード禁止
- **セキュリティライブラリ**の活用
- **定期的な脆弱性チェック**

## リファクタリング
- **コードの重複**を積極的に排除
- **長すぎる関数**の分割
- **複雑な条件分岐**の簡素化
- **デッドコード**の削除

## コードレビュー
- **機能性**の確認
- **可読性**の評価
- **パフォーマンス**への影響
- **セキュリティ**の観点
- **テストカバレッジ**の確認
