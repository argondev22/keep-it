---
globs: app/api/**/*.py
description: RESTful API設計とFastAPI実装のガイドライン
---

# API 設計ルール

## RESTful API 設計原則
- **リソース指向**の設計
- **適切なHTTPメソッド**の使用
- **統一されたURL構造**
- **適切なHTTPステータスコード**の返却

## URL 設計パターン
```
GET    /api/users              # ユーザー一覧取得
GET    /api/users/{id}         # 特定ユーザー取得
POST   /api/users              # ユーザー作成
PUT    /api/users/{id}         # ユーザー更新
DELETE /api/users/{id}         # ユーザー削除

GET    /api/users/{id}/materials        # ユーザーの教材一覧
POST   /api/users/{id}/study-sessions   # 学習セッション作成
```

## FastAPI 実装パターン
```python
from fastapi import FastAPI, HTTPException, Depends, status
from pydantic import BaseModel

class UserCreate(BaseModel):
    email: str
    nickname: str

class UserResponse(BaseModel):
    id: int
    email: str
    nickname: str
    created_at: datetime

@app.post("/api/users", response_model=UserResponse, status_code=status.HTTP_201_CREATED)
async def create_user(user: UserCreate, db: Session = Depends(get_db)):
    # 実装
    pass
```

## レスポンス設計
- **一貫したレスポンス形式**
- **適切なHTTPステータスコード**
- **エラーレスポンスの標準化**
- **ページネーション**の実装

## エラーハンドリング
```python
class APIError(BaseModel):
    error: str
    message: str
    details: Optional[dict] = None

@app.exception_handler(ValidationError)
async def validation_exception_handler(request: Request, exc: ValidationError):
    return JSONResponse(
        status_code=422,
        content=APIError(
            error="validation_error",
            message="入力データが不正です",
            details=exc.errors()
        ).dict()
    )
```

## 認証・認可
- **JWT トークン**による認証
- **スコープベース**の認可
- **ミドルウェア**による認証チェック
- **適切な権限管理**

## バリデーション
- **Pydantic**を使用したリクエストバリデーション
- **カスタムバリデーター**の実装
- **適切なエラーメッセージ**の提供

## ドキュメント
- **OpenAPI仕様**の自動生成
- **Swagger UI**の活用
- **APIドキュメント**の充実
- **使用例**の提供

## パフォーマンス
- **非同期処理**の活用
- **データベースクエリ**の最適化
- **キャッシュ戦略**の実装
- **レスポンス圧縮**の有効化

## セキュリティ
- **入力検証**の徹底
- **SQLインジェクション**対策
- **レート制限**の実装
- **CORS設定**の適切な管理
