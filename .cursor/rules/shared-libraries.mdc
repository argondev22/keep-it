---
globs: shared/**/*
description: 共通ライブラリ・ユーティリティの開発ガイドライン
---

# 共通ライブラリ・ユーティリティルール

## 共通ライブラリ設計原則
- **再利用性**を最優先とする
- **型安全性**の確保
- **プラットフォーム非依存**の設計
- **単一責任**の原則

## ディレクトリ構造
```
shared/
├── types/           # 共通型定義
│   ├── api.ts       # API型定義
│   ├── user.ts      # ユーザー型定義
│   └── study.ts     # 学習関連型定義
├── utils/           # ユーティリティ関数
│   ├── validation.ts # バリデーション関数
│   ├── formatting.ts # フォーマット関数
│   └── date.ts      # 日付処理関数
├── constants/       # 定数定義
│   ├── api.ts       # API定数
│   └── config.ts    # 設定定数
└── hooks/           # 共通React Hooks（Web用）
    ├── useApi.ts    # API呼び出しHook
    └── useAuth.ts   # 認証Hook
```

## 型定義の設計
```typescript
// 共通API型定義
export interface ApiResponse<T> {
  data: T;
  message?: string;
  status: 'success' | 'error';
}

// 共通エラー型定義
export interface ApiError {
  code: string;
  message: string;
  details?: Record<string, unknown>;
}
```

## ユーティリティ関数の設計
```typescript
// バリデーション関数
export const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// 日付フォーマット関数
export const formatDate = (date: Date, locale: string = 'ja-JP'): string => {
  return new Intl.DateTimeFormat(locale).format(date);
};
```

## 共通定数の管理
```typescript
// API定数
export const API_ENDPOINTS = {
  USERS: '/api/users',
  STUDY_SESSIONS: '/api/study-sessions',
  MATERIALS: '/api/materials',
} as const;

// 設定定数
export const APP_CONFIG = {
  MAX_STUDY_TIME: 8 * 60 * 60, // 8時間（秒）
  MIN_STUDY_TIME: 5 * 60,      // 5分（秒）
} as const;
```

## 共通Hooksの設計
```typescript
// API呼び出しHook
export const useApi = <T>(endpoint: string) => {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchData = useCallback(async () => {
    setLoading(true);
    try {
      const response = await fetch(endpoint);
      const result = await response.json();
      setData(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  }, [endpoint]);

  return { data, loading, error, fetchData };
};
```

## 品質基準
- **TypeScript**の厳密な型チェック
- **単体テスト**の実装（Jest）
- **ドキュメント**の充実
- **バージョン管理**の適切な運用

## 依存関係管理
- **最小限の依存関係**に留める
- **ピア依存関係**の適切な管理
- **セキュリティ更新**の定期実施
- **バージョン互換性**の確保

## パフォーマンス考慮
- **Tree Shaking**対応
- **バンドルサイズ**の最適化
- **メモ化**の適切な使用
- **レイジーローディング**の実装

## セキュリティ
- **入力検証**の徹底
- **XSS攻撃**対策
- **型安全性**による実行時エラー防止
- **機密情報**の適切な管理
