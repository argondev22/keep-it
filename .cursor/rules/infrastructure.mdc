---
globs: infrastructure/**/*
description: インフラストラクチャ・DevOps設定のガイドライン
---

# インフラストラクチャ・DevOps ルール

## インフラ設計原則
- **Infrastructure as Code (IaC)**の採用
- **環境の一貫性**の確保
- **セキュリティファースト**の設計
- **スケーラビリティ**の考慮

## ディレクトリ構造
```
infrastructure/
├── terraform/        # Terraform設定
│   ├── environments/ # 環境別設定
│   │   ├── dev/     # 開発環境
│   │   ├── staging/ # ステージング環境
│   │   └── prod/    # 本番環境
│   ├── modules/     # 再利用可能なモジュール
│   └── variables.tf # 変数定義
├── kubernetes/      # Kubernetes設定
│   ├── manifests/   # マニフェストファイル
│   ├── helm/        # Helm Charts
│   └── monitoring/  # 監視設定
├── docker/          # Docker設定
│   ├── Dockerfile   # マルチステージビルド
│   └── docker-compose.yml # 開発環境用
└── scripts/         # デプロイ・運用スクリプト
    ├── deploy.sh    # デプロイスクリプト
    └── backup.sh    # バックアップスクリプト
```

## Terraform設計
```hcl
# 環境変数の管理
variable "environment" {
  description = "Environment name"
  type        = string
  validation {
    condition     = contains(["dev", "staging", "prod"], var.environment)
    error_message = "Environment must be dev, staging, or prod."
  }
}

# リソースの命名規則
locals {
  name_prefix = "${var.project_name}-${var.environment}"
  common_tags = {
    Environment = var.environment
    Project     = var.project_name
    ManagedBy   = "terraform"
  }
}
```

## Kubernetes設計
```yaml
# デプロイメント設定
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keepit-api
  labels:
    app: keepit-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: keepit-api
  template:
    metadata:
      labels:
        app: keepit-api
    spec:
      containers:
      - name: api
        image: keepit/api:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
```

## 監視・ログ設計
- **Prometheus**によるメトリクス収集
- **Grafana**によるダッシュボード
- **ELK Stack**によるログ管理
- **アラート**の適切な設定

## セキュリティ設定
```yaml
# ネットワークポリシー
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: keepit-network-policy
spec:
  podSelector:
    matchLabels:
      app: keepit-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: keepit-web
    ports:
    - protocol: TCP
      port: 8000
```

## CI/CD パイプライン
```yaml
# GitHub Actions例
name: Deploy
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    - name: Terraform Plan
      run: terraform plan
    - name: Terraform Apply
      run: terraform apply -auto-approve
```

## 環境管理
- **環境の分離**（dev/staging/prod）
- **設定の外部化**（環境変数・シークレット）
- **リソース制限**の設定
- **コスト最適化**の実装

## バックアップ・災害復旧
- **自動バックアップ**の設定
- **ポイントインタイム復旧**の実装
- **災害復旧計画**の策定
- **定期的な復旧テスト**

## パフォーマンス監視
```yaml
# ServiceMonitor設定
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: keepit-api-monitor
spec:
  selector:
    matchLabels:
      app: keepit-api
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
```

## セキュリティベストプラクティス
- **最小権限の原則**
- **ネットワークセグメンテーション**
- **暗号化**の徹底
- **定期的なセキュリティスキャン**

## コスト最適化
- **リソース使用量**の監視
- **オートスケーリング**の設定
- **不要なリソース**の削除
- **予算アラート**の設定

## ドキュメント
- **アーキテクチャ図**の維持
- **運用手順書**の整備
- **障害対応手順**の文書化
- **変更履歴**の管理
